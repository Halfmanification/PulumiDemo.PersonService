name: Deploy Infrastructure to Azure with Pulumi

on:
  workflow_dispatch:
  push:
    branches:
      - main # Trigger the action when code is pushed to the 'main' branch
    paths:
      - '.github/workflows/deploy-infrastructure.yml' # Watch for changes in this workflow file
      - 'src/**/*.Infrastructure/**' # Watch for changes in the Infrastructure folder

env:
  # ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  # ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  # ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  # ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_STORAGE_ACCOUNT: ${{ vars.PULUMI_AZURE_STORAGE_ACCOUNT }}

jobs:
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse Azure credentials and set environment variables
        run: |
          echo "${{ secrets.AZURE_CREDENTIALS }}" > azure-credentials.json
          ARM_CLIENT_ID=$(jq -r '.clientId' azure-credentials.json)
          ARM_CLIENT_SECRET=$(jq -r '.clientSecret' azure-credentials.json)
          ARM_TENANT_ID=$(jq -r '.tenantId' azure-credentials.json)
          ARM_SUBSCRIPTION_ID=$(jq -r '.subscriptionId' azure-credentials.json)
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$ARM_TENANT_ID" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" >> $GITHUB_ENV
      
      - name: Find Work Directory
        run: echo "PULUMI_WORK_DIR=$(find . -type d -name '*.Infrastructure' -print -quit)" >> $GITHUB_ENV

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Pulumi CLI is installed
        id: pulumi-check
        run: pulumi version || echo "Pulumi CLI not found"

      - name: Install Pulumi CLI
        if: steps.pulumi-check.outcome == 'failure'
        run: |
          curl -fsSL https://get.pulumi.com | sh
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Pulumi Login
        run: pulumi login --cloud-url azblob://pulumi-stacks

      - name: Get pulumi stack name
        run: |
          echo "PULUMI_PROJECT_NAME=$(grep 'name:' ${{ env.PULUMI_WORK_DIR }}/Pulumi.yml | awk '{print $2}')" >> $GITHUB_ENV

      - name: Ensure Pulumi Stack
        run: |
          cd ${{ env.PULUMI_WORK_DIR }}
          pulumi stack select ${{ env.PULUMI_PROJECT_NAME}} || pulumi stack init ${{ env.PULUMI_PROJECT_NAME}}

      - name: Pulumi Up (Deploy)
        uses: pulumi/actions@v4
        with:
          command: up
          work-dir: ${{ env.PULUMI_WORK_DIR }}
          stack-name: ${{ env.PULUMI_PROJECT_NAME}}
          cloud-url: azblob://pulumi-stacks
          secrets-provider: passphrase
        env:
          PULUMI_CONFIG_PASSPHRASE: ""